# =============================================================================
# src/e07_rag_indexation.py
# =============================================================================

from rag.document_loader import SIRHDocumentLoader
from rag.vectorstore import SIRHVectorStore
from rag.embeddings import SIRHEmbeddings
from rag.config import RAGConfig
from config import get_config

def run():
    """
    √âtape 7: Indexation RAG des donn√©es g√©n√©r√©es
    """
    print("√âtape 7: Indexation RAG des donn√©es g√©n√©r√©es")
    
    # Configuration
    base_config = get_config()
    rag_config = RAGConfig.from_base_config(base_config)
    
    # Initialisation des composants RAG
    print("Initialisation des composants RAG...")
    embeddings = SIRHEmbeddings(rag_config.embedding_model)
    vectorstore = SIRHVectorStore(rag_config, embeddings)
    document_loader = SIRHDocumentLoader(rag_config)
    
    # Chargement des documents
    print("Chargement des documents...")
    documents = document_loader.load_all_documents()
    
    if not documents:
        print("‚ö†Ô∏è Aucun document trouv√© √† indexer")
        return
    
    print(f"üìÑ {len(documents)} documents trouv√©s")
    
    # Indexation
    print("Indexation des documents dans la base vectorielle...")
    vectorstore.add_documents(documents)
    
    # Statistiques
    stats = vectorstore.get_collection_stats()
    print(f"‚úÖ Indexation termin√©e:")
    print(f"   - Documents index√©s: {stats['count']}")
    print(f"   - Collection: {stats['name']}")
    print(f"   - Chemin: {rag_config.vector_store_path}")
    
    # Test rapide
    print("\nüß™ Test rapide du syst√®me RAG...")
    try:
        test_results = vectorstore.similarity_search("employ√© d√©veloppeur", k=3)
        print(f"   - Test r√©ussi: {len(test_results)} r√©sultats trouv√©s")
    except Exception as e:
        print(f"   - ‚ö†Ô∏è Test √©chou√©: {e}")
    
    print("‚úÖ Syst√®me RAG pr√™t √† l'utilisation!")