# =============================================================================
# data_generation/steps/e08_neo4j_sync.py
# =============================================================================

import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

from core.config import get_config
from graph_sync.core.sync_manager import SyncManager

def run():
    """
    √âtape 8: Synchronisation Neo4j
    Tables: Toutes -> Neo4j Graph Database
    """
    print("√âtape 8: Synchronisation de la base de donn√©es vers Neo4j")
    
    config = get_config()
    entreprise = config['entreprise']
    db_path = f"{entreprise['base_de_donn√©es']['chemin']}/{entreprise['base_de_donn√©es']['nom']}"
    
    if not Path(db_path).exists():
        print(f"‚ùå Erreur: Base de donn√©es introuvable √† {db_path}")
        print("   Assurez-vous d'avoir ex√©cut√© les √©tapes pr√©c√©dentes (0-7)")
        return
    
    try:
        print(f"Base de donn√©es source: {db_path}")
        print("Configuration Neo4j: graph_sync/config/")
        
        # Initialiser le gestionnaire de synchronisation
        sync_manager = SyncManager(config_dir="graph_sync/config")
        
        # Effectuer la synchronisation compl√®te avec remplacement
        print("\nüîÑ D√©marrage de la synchronisation compl√®te...")
        sync_manager.sync_full_replace(db_path)
        
        # Afficher les statistiques d√©taill√©es
        print("\n" + "="*60)
        stats = sync_manager.get_stats()
        
        print("üìä STATISTIQUES NEO4J")
        print("="*60)
        
        print("\nüì¶ N≈ìuds cr√©√©s:")
        total_nodes = 0
        for label, count in sorted(stats['nodes'].items(), key=lambda x: x[1], reverse=True):
            print(f"  ‚Ä¢ {label:<25} {count:>6,} n≈ìuds")
            total_nodes += count
        print(f"  {'‚îÄ'*35}")
        print(f"  {'TOTAL':<25} {total_nodes:>6,} n≈ìuds")
        
        print("\nüîó Relations cr√©√©es:")
        total_rels = 0
        for rel_type, count in sorted(stats['relationships'].items(), key=lambda x: x[1], reverse=True):
            print(f"  ‚Ä¢ {rel_type:<25} {count:>6,} relations")
            total_rels += count
        print(f"  {'‚îÄ'*35}")
        print(f"  {'TOTAL':<25} {total_rels:>6,} relations")
        
        print("\n" + "="*60)
        print("‚úÖ Synchronisation Neo4j termin√©e avec succ√®s!")
        print("="*60)
        
        # Informations d'acc√®s
        print("\nüåê Acc√®s Neo4j Browser:")
        print("   URL: http://localhost:7474")
        print("   Utilisateur: neo4j")
        print("   (Mot de passe configur√© dans ~/.neo4j_password)")
        
        print("\nüí° Exemples de requ√™tes Cypher:")
        print("   // Visualiser la hi√©rarchie")
        print("   MATCH (e:Employee)-[:MANAGES]->(s:Employee)")
        print("   RETURN e, s LIMIT 25")
        print()
        print("   // Employ√©s par d√©partement")
        print("   MATCH (e:Employee)-[:WORKS_IN]->(u:OrganizationalUnit)")
        print("   RETURN u.nom as D√©partement, count(e) as Effectif")
        print("   ORDER BY Effectif DESC")
        
    except FileNotFoundError as e:
        print(f"‚ùå Erreur de configuration: {e}")
        print("   V√©rifiez que les fichiers de configuration Neo4j sont pr√©sents:")
        print("   - graph_sync/config/neo4j_config.yaml")
        print("   - graph_sync/config/mapping.yaml")
        print("   - graph_sync/config/constraints.yaml")
        print("   - ~/.neo4j_password")
        raise
        
    except ConnectionError as e:
        print(f"‚ùå Erreur de connexion Neo4j: {e}")
        print("   V√©rifiez que Neo4j est d√©marr√©:")
        print("   - Service Neo4j actif (port 7687)")
        print("   - Identifiants corrects dans ~/.neo4j_password")
        raise
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la synchronisation Neo4j: {e}")
        print("\nüîç D√©pannage:")
        print("   1. V√©rifier que Neo4j est install√© et d√©marr√©")
        print("   2. V√©rifier le fichier ~/.neo4j_password")
        print("   3. V√©rifier les configurations dans graph_sync/config/")
        print("   4. Consulter les logs Neo4j pour plus de d√©tails")
        raise

if __name__ == "__main__":
    # Permet de tester l'√©tape individuellement
    from core.config import load_config
    
    # Charger la configuration par d√©faut
    load_config('config.yaml')
    
    # Ex√©cuter l'√©tape
    run()