# Logique de cr√©ation d'entreprise - Fake-sirh-2

## üéØ Vue d'ensemble du processus

```
Description macroscopique ‚Üí G√©n√©ration progressive ‚Üí Base de donn√©es compl√®te
```

## üìã Phase 1 : Description macroscopique (Input humain)

### Param√®tres d'entr√©e
```yaml
company_profile:
  name: "TechFlow Solutions"
  sector: "Software Development"
  size: 150
  locations: ["Paris", "Lyon"]
  culture: "Innovation-driven, remote-friendly"
  growth_stage: "Scale-up"
  challenges: ["High turnover", "Skill gaps in AI/ML"]
  
organizational_structure:
  departments: ["Engineering", "Sales", "Marketing", "HR", "Finance"]
  hierarchy_levels: 4
  management_style: "Flat hierarchy"
  
hr_context:
  avg_tenure: "2.5 years"
  turnover_rate: "15%"
  training_budget: "2000‚Ç¨/employee/year"
  performance_cycle: "Annual + quarterly check-ins"
```

## üîÑ Phase 2 : G√©n√©ration progressive (6 √©tapes)

### √âtape 1 : Structure organisationnelle
**Tables : `organizational_unit`, `position`**

```python
# CLI: python generate.py --step=structure --profile=company_profile.yaml

# Prompt Ollama:
"""
Bas√© sur une entreprise {sector} de {size} employ√©s avec culture {culture},
g√©n√®re la structure organisationnelle :

1. Liste des unit√©s organisationnelles avec descriptions
2. Hi√©rarchie entre unit√©s (parent/enfant)
3. Positions types par unit√© avec niveaux hi√©rarchiques
4. Descriptions r√©alistes des responsabilit√©s

Format: JSON structur√©
"""
```

### √âtape 2 : Population et hi√©rarchie
**Tables : `employee`, `assignment`**

```python
# CLI: python generate.py --step=employees --profile=company_profile.yaml

# Logique :
1. G√©n√©rer le DG (manager_id = NULL)
2. Pour chaque unit√©, g√©n√©rer le manager
3. G√©n√©rer les employ√©s par niveau hi√©rarchique
4. Assigner les relations manager/manag√©
5. Cr√©er les affectations position/unit√© actuelles

# Prompt Ollama pour chaque employ√©:
"""
G√©n√®re un profil d'employ√© r√©aliste pour le poste {position} 
dans l'unit√© {unit} d'une entreprise {sector}.

Contraintes:
- Pr√©nom/nom fran√ßais
- Email coh√©rent
- Date d'embauche selon anciennet√© moyenne {avg_tenure}
- Profil adapt√© au poste et √† la culture d'entreprise

Format: JSON avec first_name, last_name, email, hire_date
"""
```

### √âtape 3 : Comp√©tences et r√©f√©rentiels
**Tables : `skill`, `employee_skill`**

```python
# CLI: python generate.py --step=skills --profile=company_profile.yaml

# Logique :
1. G√©n√©rer r√©f√©rentiel de comp√©tences par secteur/m√©tier
2. Distribuer les comp√©tences selon les postes
3. G√©n√©rer des niveaux r√©alistes avec variabilit√©

# Prompt Ollama:
"""
Pour une entreprise {sector}, g√©n√®re :

1. R√©f√©rentiel de comp√©tences (techniques + soft skills)
2. R√©partition par cat√©gorie (Technical, Management, Soft Skills)
3. Matrice comp√©tences/postes avec niveaux attendus

Puis assigne des niveaux r√©alistes √† chaque employ√© selon :
- Son poste actuel
- Son anciennet√©
- Variabilit√© naturelle des √©quipes
"""
```

### √âtape 4 : Objectifs et performance
**Tables : `goal`, `performance_review`**

```python
# CLI: python generate.py --step=performance --profile=company_profile.yaml

# Logique :
1. G√©n√©rer objectifs annuels par employ√© (individuels + collectifs)
2. Cr√©er historique d'√©valuations (2-3 ans)
3. Distribuer les scores selon une courbe r√©aliste
4. G√©n√©rer commentaires coh√©rents avec les scores

# Prompt Ollama:
"""
G√©n√®re des objectifs SMART et √©valuations pour {employee_name}, 
{position} dans l'√©quipe {unit}.

Contexte entreprise : {challenges}, culture {culture}

Cr√©er :
1. 3-5 objectifs annuels adapt√©s au poste
2. √âvaluation avec score (1-5) et commentaires d√©taill√©s
3. Coh√©rence objectifs/r√©sultats/commentaires
4. Style manag√©rial selon la culture d'entreprise
"""
```

### √âtape 5 : Formations et d√©veloppement
**Tables : `training_program`, `training_record`**

```python
# CLI: python generate.py --step=training --profile=company_profile.yaml

# Logique :
1. Cr√©er catalogue de formations (internes + externes)
2. Distribuer formations selon besoins m√©tier
3. G√©n√©rer historique avec scores et satisfaction
4. Respecter budget formation global

# Prompt Ollama:
"""
Pour une entreprise {sector} avec budget formation {training_budget},
g√©n√®re :

1. Catalogue de formations (leadership, technique, compliance)
2. Historique formations par employ√© (6 derniers mois)
3. Scores et commentaires r√©alistes
4. Focus sur {challenges} identifi√©s

R√©partition intelligente selon postes et lacunes comp√©tences.
"""
```

### √âtape 6 : Feedback et documents
**Tables : `feedback`, `document`**

```python
# CLI: python generate.py --step=feedback_docs --profile=company_profile.yaml

# Logique :
1. G√©n√©rer feedback 360¬∞ avec fr√©quence r√©aliste
2. Cr√©er documents (CV, dipl√¥mes, attestations)
3. Assurer coh√©rence documents/profils/comp√©tences

# Prompt Ollama:
"""
G√©n√®re feedback et documents pour {employee_name} :

1. Feedback re√ßus/donn√©s (pairs, managers, √©quipes)
2. CV coh√©rent avec poste et comp√©tences
3. Dipl√¥mes et certifications adapt√©s
4. Attestations de formations suivies

Style : {culture}, secteur {sector}
Coh√©rence totale avec le profil existant.
"""
```

## üîß Phase 3 : Validation et ajustements

### Contr√¥les automatiques
```python
# CLI: python validate.py --check=all

checks = [
    "hierarchy_integrity",      # Pas de cycles, DG unique
    "assignment_consistency",   # Une seule affectation active/employ√©
    "skill_distribution",       # Niveaux coh√©rents par poste
    "performance_coherence",    # Objectifs/√©valuations/feedback align√©s
    "temporal_consistency",     # Dates logiques
    "budget_compliance"         # Formation dans les budgets
]
```

### Ajustements par LLM
```python
# Si incoh√©rences d√©tect√©es :
# Prompt Ollama pour corrections cibl√©es

"""
Corrige les incoh√©rences suivantes dans les donn√©es RH :

Probl√®mes d√©tect√©s :
{validation_errors}

Contexte entreprise : {company_profile}

Propose des ajustements minimaux pour restaurer la coh√©rence
tout en gardant le r√©alisme.
"""
```

## üéÆ Interface CLI propos√©e

```bash
# G√©n√©ration compl√®te
python fake_sirh.py generate --profile=techflow.yaml --output=database.sqlite

# G√©n√©ration par √©tapes
python fake_sirh.py generate --step=structure --profile=techflow.yaml
python fake_sirh.py generate --step=employees --continue
python fake_sirh.py generate --step=skills --continue

# Validation
python fake_sirh.py validate --database=database.sqlite

# Export pour RAG
python fake_sirh.py export --format=documents --output=rag_corpus/
```

## üéØ Avantages de cette approche

1. **Coh√©rence garantie** : G√©n√©ration progressive avec validation
2. **Flexibilit√©** : Param√©trage fin via profil d'entreprise
3. **R√©alisme** : LLM adapte selon secteur/culture/contraintes
4. **Rapidit√©** : Automatisation compl√®te apr√®s param√©trage initial
5. **Debugging** : G√©n√©ration par √©tapes pour isolation des probl√®mes
6. **Reproductibilit√©** : Seeds et profils versionn√©s

## üìä M√©triques de qualit√©

- **Coh√©rence hi√©rarchique** : 100% (validation automatique)
- **R√©alisme des profils** : √âvaluation manuelle sur √©chantillon
- **Diversit√© des donn√©es** : M√©triques de dispersion
- **Completude** : Pourcentage de champs remplis
- **Performance RAG** : Tests de requ√™tes types